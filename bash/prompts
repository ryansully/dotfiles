#!/usr/bin/env bash

#
# PROMPTS
#

# source prompts (to refresh after any changes)
prompt_bashrc() {
    . $BASH_SOURCE
}

_ps1_title() {
    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        # PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        echo "\[\e]0;\u@\h: \w\a\]"
        ;;
    *)
        ;;
    esac
}

prompt_original_color() {
    PROMPT_COMMAND='PS1="`_ps1_title`${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "'
}

prompt_original_non_color() {
    PROMPT_COMMAND='PS1="`_ps1_title`${debian_chroot:+($debian_chroot)}\u@\h:\w\$ "'
}

# PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
#
# The argument to __git_ps1 will be displayed only if you
# are currently in a git repository.  The %s token will be
# the name of the current branch.
#
prompt_original_git() {
    PROMPT_COMMAND='PS1="`_ps1_title`[\u@\h \W$(__git_ps1 " (%s)")]\$ "'
    _ps1_git_vars
}

# In addition, if you set GIT_PS1_SHOWDIRTYSTATE to a nonempty
# value, unstaged (*) and staged (+) changes will be shown next
# to the branch name.  You can configure this per-repository
# with the bash.showDirtyState variable, which defaults to true
# once GIT_PS1_SHOWDIRTYSTATE is enabled.
#
# You can also see if currently something is stashed, by setting
# GIT_PS1_SHOWSTASHSTATE to a nonempty value. If something is stashed,
# then a '$' will be shown next to the branch name.
#
# If you would like to see if there're untracked files, then you can
# set GIT_PS1_SHOWUNTRACKEDFILES to a nonempty value. If there're
# untracked files, then a '%' will be shown next to the branch name.
#
# If you would like to see the difference between HEAD and its
# upstream, set GIT_PS1_SHOWUPSTREAM="auto".  A "<" indicates
# you are behind, ">" indicates you are ahead, and "<>"
# indicates you have diverged.  You can further control
# behaviour by setting GIT_PS1_SHOWUPSTREAM to a space-separated
# list of values:
#     verbose       show number of commits ahead/behind (+/-) upstream
#     legacy        don't use the '--count' option available in recent
#                   versions of git-rev-list
#     git           always compare HEAD to @{upstream}
#     svn           always compare HEAD to your SVN upstream
# By default, __git_ps1 will compare HEAD to your SVN upstream
# if it can find one, or @{upstream} otherwise.  Once you have
# set GIT_PS1_SHOWUPSTREAM, you can override it on a
# per-repository basis by setting the bash.showUpstream config
# variable.
_ps1_git_vars() {
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_SHOWSTASHSTATE=true
    GIT_PS1_SHOWUNTRACKEDFILES=true
    GIT_PS1_SHOWUPSTREAM="verbose"

    # colors
    PS1_GIT_COLOR_DIRTY="\[$Red\]"
    PS1_GIT_COLOR_STAGED="\[$Green\]"
    PS1_GIT_COLOR_STASHED="\[$Yellow\]"
    PS1_GIT_COLOR_UNTRACKED="\[$Blue\]"
    PS1_GIT_COLOR_GITDIR="\[$BRed\]"
}

_ps1_git_color() {
	local w # dirty
	local i # indexed
	local s # stashed
	local u # untracked

	if [ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
		i=$PS1_GIT_COLOR_GITDIR
	elif [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
		if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ]; then
			if [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
				git diff --no-ext-diff --quiet --exit-code || w=$PS1_GIT_COLOR_DIRTY
				if git rev-parse --quiet --verify HEAD >/dev/null; then
					git diff-index --cached --quiet HEAD -- || i=$PS1_GIT_COLOR_STAGED
				else
					i=$PS1_GIT_COLOR_DIRTY
				fi
			fi
		fi
		if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ]; then
		        git rev-parse --verify refs/stash >/dev/null 2>&1 && s=$PS1_GIT_COLOR_STASHED
		fi

		if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ]; then
		   if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		      u=$PS1_GIT_COLOR_UNTRACKED
		   fi
		fi
	fi

	echo "$w$i$s$u"
}

_ps1_pwd() {
    if [[ `pwd|sed "s#$HOME#~#"|wc -c|tr -d " "` > $1 ]]; then
        echo $(basename "`pwd`")
    else
        echo $(pwd | sed "s#$HOME#~#")
    fi
}

_ps1_exit_status() {
    if [ $1 != 0 ]; then
        echo -e "\[$Red\]$1\[$Color_Off\]:"
    fi
}

_ps1_virtualenv() {
    if [ "$VIRTUAL_ENV" ]; then
        echo -e "(\[$Yellow\]`basename "\$VIRTUAL_ENV"`\[$Color_Off\]) "
    fi
}

#
# My super prompt :)
#
# 1. set the terminal title to user@host:dir
# 2. virtualenv
# 3. red exit status if above zero (don't display if zero)
# 4. blue dir, uses basename if path exceeds 20 characters, because 2+ line
#    prompts suck
# 5. colored git prompt: displays current branch when inside a git repo
#    clean:     (default color)
#    dirty:     red *
#    staged:    green +
#    stashed:   yellow $
#    untracked: blue %
#    .git dir:  light red GIT_DIR!
#    bottom takes color precedence, e.g. untracked overrides dirty
#
prompt_me() {
    PROMPT_COMMAND='RET=$?;PS1="`_ps1_title``_ps1_virtualenv``_ps1_exit_status $RET`\[$BBlue\]$(_ps1_pwd 20)\[$Color_Off\]$(__git_ps1 " (`_ps1_git_color`%s\[$Color_Off\])")\$ "'
    _ps1_git_vars
}

# Powerline
powerline_path=$(python3 -c 'import imp; print(imp.find_module("powerline")[1])')
if [ -d $powerline_path ]; then
    powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
    . $powerline_path/bindings/bash/powerline.sh
else
    prompt_me # it's no powerline, but I designed it and it has served me well
fi